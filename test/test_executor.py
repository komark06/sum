import datetime
from src.data_loader import AbstractDataLoader, Summons
from src.executor import BruteForceExecutor
import pytest


class FakeDataLoader(AbstractDataLoader):
    """A fake data loader that simulates ExcelDataLoader.

    This loader is designed to mimic the functionality of ExcelDataLoader
    by generating a set of numbers and targets to simulate solving the
    subset sum problem.
    """

    def __init__(self, solvable: bool = True):
        """Initialize the FakeDataLoader.

        Args:
            solvable: Determines if the subset sum problem generated by
                this loader is solvable.
        """
        super().__init__()
        self.solvable = solvable

    def load(self):
        """Load simulated data.

        This method generates a set of numbers and targets. If the
        `solvable` flag is True, the target will be a subset sum
        achievable from the numbers. Otherwise, it will generate a
        target that is not achievable.
        """
        numbers = [i for i in range(10)]
        if self.solvable:
            targets = [numbers[-1]]
        else:
            targets = [sum(numbers) + 1]

        self.targets = [
            Summons("targets", datetime.date(2020, 1, 1), target)
            for target in targets
        ]
        self.numbers = [
            Summons("numbers", datetime.date(2020, 1, 1), number)
            for number in numbers
        ]
        self.sort()
        self._loaded = True


@pytest.mark.parametrize("solvable", [(True), (False)])
def test_executor(solvable: FakeDataLoader):
    """Verify that BruteForceExecutor successfully solve problem."""
    data_loader = FakeDataLoader(solvable)
    data_loader.load()
    eva = BruteForceExecutor()
    results = eva.calculate_all(data_loader.targets, data_loader.numbers)
    for i in results:
        if i.subset:
            assert sum([x.amount for x in i.subset]) == i.target.amount
            assert solvable
        else:
            assert solvable is False
