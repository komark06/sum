import datetime
import time
from typing import Callable

from src.data_loader import AbstractDataLoader, Summons
from src.executor import AbstractExecutor, Result


class FakeDataLoader(AbstractDataLoader):
    """A fake data loader that simulates ExcelDataLoader.

    This loader is designed to mimic the functionality of
    ExcelDataLoader by generating a set of numbers and targets to
    simulate solving the subset sum problem.
    """

    def __init__(self, solvable: bool = True):
        """Initialize the FakeDataLoader.

        Args:
        ----
            solvable: Determines if the subset sum problem generated by
                this loader is solvable.

        """
        super().__init__()
        self.solvable = solvable
        self.load()

    def load(self, *args, **kwargs):
        """Load simulated data.

        This method generates a set of numbers and targets. If the
        `solvable` flag is True, the target will be a subset sum
        achievable from the numbers. Otherwise, it will generate a
        target that is not achievable.
        """
        numbers = [i for i in range(10)]
        targets = [numbers[-1]] if self.solvable else [sum(numbers) + 1]
        self.targets = [
            Summons("targets", datetime.date(2020, 1, 1), target)
            for target in targets
        ]
        self.numbers = [
            Summons("numbers", datetime.date(2020, 1, 1), number)
            for number in numbers
        ]
        self.sort()
        self._loaded = True


class InfiniteExecutor(AbstractExecutor):
    """An executor that never finishes the calculation.

    This executor is designed to simulate an executor that never
    finishes the calculation. It is used to test the timeout feature
    of the SubprocessManager.
    """

    def calculate_all(
        self,
        targets: list[Summons],
        numbers: list[Summons],
        callback: Callable[[float], None] = lambda x: None,
    ) -> list[Result]:
        """Calculate all subset sum.

        This method will never finish the calculation. It is used to
        test the timeout feature of the SubprocessManager.
        """
        while True:
            callback(0.5)
            time.sleep(1)


class ExceptionExecutor(AbstractExecutor):
    """An executor that raises an exception.

    This executor is designed to simulate an executor that raises an
    exception during the calculation. It is used to test the error
    handling feature of the SubprocessManager.
    """

    def calculate_all(
        self,
        targets: list[Summons],
        numbers: list[Summons],
        callback: Callable[[float], None] = lambda x: None,
    ) -> list[Result]:
        """Calculate all subset sum.

        This method will raise an exception. It is used to test the
        error handling feature of the SubprocessManager.
        """
        raise ValueError("Simulated Executor Error")
